分析源码不是为了分析而分析，价值在于这么设计背后的真实原理？

为何有两个EventLoopGroup？

channel 中是NioServerSocketChannel如何封装Java的NIO的？为何这样设计呢？

Reactor模式解析  反应器模式

Proactor模式 网络编程

netty整体架构是reactor模式的完整体现

Responsive Design 响应式设计

Scalable IO in Java Doug Lea

Reactor Douglas 论文

netty3 netty4区别？

***************************************
Reactor角色构成：（一共有5种角色构成，以下的角色基于Reactor Douglas 论文）

1.handle（句柄或者描述符）：本质上表述一种资源，是由操作系统提供的，该资源用于表示一个个的事件，比如说文件描述符，或是针对网络编程中的socket描述符。事件既可以来自内部，也可以来自外部，外部事件比如说客户端连接请求，客户端发送过来数据等；内部事件比如说操作系统产生的定时器事件等，它本身就是一个文件描述符。handle本身是事件产生的发源地。

2.synchronous event demultipelxer（同步事件分离器）：它本身是一个系统调用，用于等待事件的发生（事件可能是一个，也可能是多个）。调用方在调用它的时候会被阻塞，一直阻塞到同步事件分离器上有事件产生为止。对于linux来说，同步事件分离器指的就是常用的IO多路复用机制，比如说select、poll、epoll等。在Java NIO领域中，同步事件分离器对应的组件就是selector，对应的阻塞方法就是select方法。

3.event handler（事件处理器）：本身由多个回调方法构成，这些回调方法构成了与应用相关的对于某个事件的反馈机制。Netty相比于Java NIO来说，在事件处理器这个角色上进行了一个升级，它为我们开发者提供了大量的回调方法，供我们在特定时间产生时实现相应的回调方法进行业务逻辑处理。

4.concrete event handler(具体事件处理器):是事件处理器的实现，它本身实现了事件处理器所提供的各个回调方法，从而实现了特定于业务的逻辑，它本质上就是我们所编写的一个个的处理器的实现。 channelRead0方法是谁调用的？workgroup ->subreactor

5.initiation dispatcher（初始分发器）：它实际上就是Reactor角色，它本身定义了一些规范，这些规范用于控制事件的调度方式，同时又提供了应用于事件处理器的注册、删除等设施。它本身是整个事件处理器的核心所在，initiation dispatcher会通过同步事件分离器来等待事件的发生，一旦事件发生，initiation dispatcher首先会分离出每一个事件，然后调用事件处理器，最后调用相关的回调方法来处理这些事件。


initiation dispatcher 启动之后，将若干个event handler注册到initiation dispatcher同时指定感兴趣的事件，感兴趣的事件是通过handle指定的


****************************************
Reactor模式的流程

1.当应用向initiation dispatcher 注册具体的事件处理器时，应用会标识出该事件处理器希望initiation dispatcher在某个事件发生时向其通知的该事件，该事件与handle关联；

2.initiation dispatcher会要求每个事件处理器向其传递内部的handle，该handle向操作系统标识了事件处理器

3.当所有的事件处理器注册完毕后，应用会调用handle_events方法来启动initiation dispatcher 的事件循环。这时，initiation dispatcher会将每个注册的事件管理器的handle合并起来，并使用同步事件分离器等待这些事件的发生，比如说，tcp协议层会使用select同步事件分离器操作来等待客户端发送的数据到达连接的socket handle上。

4.当与某个事件源对应的handle变为ready状态时，比如说tcp socket变为等待读状态时，同步事件分离器会通知initiation dispatcher

5.initiation dispatcher 会触发事件处理器的回调方法，从而响应这个处于ready状态的handle，当事件发生时，initiation dispatcher会将被事件源激活的handle作为key来寻找并分发恰当的事件处理器回调方法

6.initiation dispatcher会回调事件处理器的handle_events回调方法来执行特定于应用的功能（开发者自己所编写功能），从而响应这个事件，所发生的事件类型可以作为该方法的参数并被该方法内部使用来执行额外的特定于服务的分离与分发。



channel何时被创建？channelPipeline何时被创建？
Channel p = channel.pipeline(); AbstractChannel 定义的；创建父类时生成的
两者之间的对应关系及设计模式？




