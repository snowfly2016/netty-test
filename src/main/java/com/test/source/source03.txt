AtomicIntegerFieldUpdater要点总结：

1.更新器更新的必须是int类型的变量，不能是其包装类型。
2.更新器更新的必须是volatile类型变量，确保线程之间共享变量时的立即可见性。
3.变量不能是static的，必须要是实例变量，因为Unsafe.objectFileOffset()方法不支持静态变量。（CAS操作本质上是通过对象实例的偏移量来直接进行赋值的）
4.更新器只能修改它可见范围内的变量，因为更新器是通过反射来得到这个变量的，如果变量不可见就会报错；

如果更新的变量时包装类型，那么可以使用AtomicReferenceFieldUpdater来进行更新。

****************************************************************************************************
netty官网文档 引用计数器 reference-counted-objects
http://netty.io/wiki/reference-counted-objects.html

什么是Netty的内存泄漏检测？是如何实现的？
http://calvin1978.blogcn.com/articles/netty-leak.html

将从客户端消息转成ByteBuf，放入Handler链中，往后传递，该类就是 NioByteUnsafe read()

TailContext
HeadContext


****************************************************************************************************
Netty的处理器、编解码器

Netty处理器的重要概念：
1.Netty的处理器可以分为两类：入站处理器和出站处理器
2.入站处理器的顶层是 ChannelInboundHandler,出站处理器的顶层是 ChannelOutboundHandler。
3.数据处理时常用的各种编解码器本质上都是处理器
4.编解码器：无论我们向网络中写入的数据是什么类型，（int、char、String、二进制）数据在网络中传递时，其都是以字节流的形式呈现的；将数据由原本的形式转化为字节流的操作称为编码 encode；将数据由字节转换为它原本个格式或是其他格式的操作称为解码 decode；编解码统一称为codec。
5.编码：本质上是一种出站处理器。因此，编码一定是一种 ChannelInboundHandler。
6.解码：本质上是一种入站处理器。因此，解码一定是一种 ChannelOutboundHandler。
7.在Netty中，编码器通常以xxxEncoder命名；解码器通常以xxxDecoder命名。

Netty自动区分入站、出站处理器，不会因为程序员定义的顺序而导致问题；

关于Netty编解码器重要结论：
1.无论是编码器还是解码器，其所接收的消息类型必须要与待处理的参数类型一致，否则该解码器或编码器不会执行
2.在解码器进行数据解码时，一定要借的判断缓冲ByteBuf中的数据是否足够，否则将会产生一些问题。


MessageToMessageCodec 既是解码器也是编码器
LengthFieldBasedFrameDecoder