##JVM学习方法论
* 从书本学习
* 从人学习（总结、思考、记笔记）
* 持久化所学的东西（输入~输出）
* 个人脱离公司有更好的发展，即自己有更好的溢价能力
* 为啥掌握了的技术过段时间就忘记了？
* 应用框架的学习 先学会使用，让项目跑起来，然后在研究原理；

##如何学习JVM
* R大 JVM专家
* 学的越多，不知道的越多
* 基于JVM的各种动态与静态语言生态圈已经异常繁荣（重要性）
* jvisualvm

##类加载
* 在Java代码中，类型的加载、连接、初始化过程都是在程序运行期间完成的（类型是定义的class、interface）
* 提供了更大的灵活性，增加了更多的可能性
* Java虚拟机与程序的生命周期（如下几种情况下，Java虚拟机将结束生命周期）
  * 1.执行了System.exit()方法
  * 2.程序正常执行退出
  * 3.程序在执行过程中遇到了异常或错误而异常终止
  * 4.由于操作系统出现错误而导致Java虚拟机进程终止
* 加载：查找并加载类的二进制数据
* 连接：验证：确保被加载的类的正确性 准备：为类的静态变量分配内存，并将其出书化为默认值 解析：把类中的符号引用转换为直接引用
* 初始化：为类的静态变量赋予正确的初始值
* 使用：
* 卸载：

* Java程序对类的使用方式可分为两种 
    1.主动使用 
        创建类的实例
        访问某个类或接口的静态变量，或者对该静态变量赋值
        调用类的静态方法 getstatic putstatic invokestatic
        反射（Class.forName("aaa")）
        初始一个类的子类 （class Parent{} class Child extends Parent{}）
        Java虚拟机启动时被标明为启动类的类（Java Test）
        JDK1.7开始提供的动态语言支持（java.lang.invoke.MethodHandle实例的解析结果REF_getStatic,REF_putStatic,REF_invokeStatic句柄对应的类没有初始化，则初始化）
    2.被动使用
* 所有的Java虚拟机实现必须在每个类或接口被Java程序""首次主动使用"时才初始化他们
* 类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在内存中创建一个java.lang.Class对象，（规范并未说明Class对象位于哪里，HotSpot虚拟机将其放在了方法区中）用来封装类在方法区内的数据结构
*加载.class文件的方式
    从本地系统中直接加载
    通过网络下载.class文件
    从zip,jar等归档文件中加载.class文件
    从专有数据库中提取.class文件
    将Java源文件动态编译为.class文件

