##MySQL索引
* 索引的出现就是为了提高数据的查询效率，就像书的目录一样；
* 索引的常见模型
  * 哈希表
  * 有序数组
  * 搜索树（二叉树...N叉树）
  * 其他（跳表、LSM树）
    
* InnoDB的索引模型
  * 索引组织表：在InnoDB中，表都是根据主键顺序以索引的形式存放的，这种存储方式的表称为索引组织表；
  * InnoDB使用了B+树索引模型
  * 索引类型分为：主键索引、非主键索引
  * 主键索引（聚集索引 clustered index）主键索引的叶子节点存储的是整行数据；
  * 非主键索引（二级索引 secondary index）非主键索引叶子节点的内容是主键的值（回表：回到主键索引树搜索的过程）；
  * 基于主键索引和普通索引查询有什么区别？基于非主键索引的查询需要多扫描一颗索引树，因此，应尽量使用主键查询
  * 一个表上包含多个索引树；
  * 索引的维护：（B+树为了维护索引的有序性，当产生数据的新增和删除就会出现页分裂、页合并）；一个数据页满了，按照B+Tree算法，新增加一个数据页，叫做页分裂，会导致性能下降。空间利用率降低大概50%。当相邻的两个数据页利用率很低的时候会做数据页合并，合并的过程是分裂过程的逆过程
  * 自增主键是自增列上定义的主键，not null primary key atuo_increment，插入新记录时可以不指定ID的值，系统会获取当前ID最大值加一作为下一条记录的ID值；
  * 主键长度越小，普通索引的叶子节点就越小，普通索引占用的空间也就越小；
  * 关于那些场景下使用自增主键需要按照业务的实际场景来区分，未必每个表都设置自增主键；
  * 从性能和存储空间方面考量，自增主键往往是更合理的选择。
  * T his group of numbers is from a presentation Jeff Dean gave at a Engineering All-Hands Meeting at Google. 
       L1 cache reference 0.5 ns
       Branch mispredict 5 ns
       L2 cache reference 7 ns
       Mutex lock/unlock 100 ns
       Main memory reference 100 ns
       Compress 1K bytes with Zippy 10,000 ns
       Send 2K bytes over 1 Gbps network 20,000 ns
       Read 1 MB sequentially from memory 250,000 ns
       Round trip within same datacenter 500,000 ns
       Disk seek 10,000,000 ns
       Read 1 MB sequentially from network 10,000,000 ns
       Read 1 MB sequentially from disk 30,000,000 ns
       Send packet CA->Netherlands->CA 150,000,000 ns
  * 覆盖索引：由于覆盖索引可以减少树的搜索次数，显著提升查询性能，所以覆盖索引是一个常用的性能优化手段；
  * 索引之最左前缀原则 在建立联合索引时，如何安排索引内字段的顺序（1.如果通过调整顺序，可以少维护一个索引，那么这个顺序往往就是需要优先考虑采用的；2.空间）
  * 索引下推 减少回表次数
  
  * 1.重建普通索引 alter table T drop index k; alter table T add index(k);
  * 2.重建主键索引 alter table T drop primary key; alter table T add primary key(id);
  * 以上两个重建语句是否合理？重建索引k的做法是合理的，可以达到省空间的目标；但是重建主键索引的过程不合理，无论删除主键还是创建主键都会将整个表重建，如果这两个语句连着执行，第一个语句就白做了；这两个语句可以用 alter table T engine = InnoDB替代；
  * MySQL 重建索引是不是需要自动执行呢？
  * Multi-Range Read (MRR)多范围读, 它的作用针对基于辅助/第二索引的查询，减少随机IO，并且将随机IO转化为顺序IO，提高查询效率。
  * 
##如何避免长事务对业务的影响
* 应用开发端
  * 确认是否使用了set autocommit=0;打开MySQL的general_log
  * 确认是否有不必要的只读事务
  * 业务连接数据库时，根据业务本身的预估，通过 set max_connection_time命令来控制每个语句的执行的最长时间，避免单个语句意外执行太长时间
* 数据库端
  * 监控information_schema.innodb_trx表，设置长事务阈值，超过就报警或者kill调；
  * Procon pt-kill
  * 业务测试阶段输出所有的general_log，分析日志行为提前发现问题
  * 如果使用的是MySQL5.6及以后的版本，把innodb_undo_tablespace设置成2或者更大的值，如果真出现大事务导致回滚段过大，这样设置清理起来方便；
*

##MySQL锁
* 根据加锁的范围，锁大致可分为全局锁、表级锁、行级锁

* 全局锁：对整个数据库实例加锁；MySQL提供了一个加全局读锁的方法，命令是：flush table with read lock(FTWRL)；全局锁的典型使用场景是，做全库逻辑备份，在备份过程中整个库完全处于只读状态；
    全局锁缺点：1.如果在主库上备份，在备份期间都不能执行更新，业务基本上就得停摆；2.如果在从库上备份，备份期间从库上不能执行主库同步过来的binlog，会导致主从延迟；
    备份时如果不加锁的话，备份系统备份得到的库不是一个逻辑时间点，这个视图是逻辑不一致的。
    官方自带的逻辑备份工具mysqldump，使用参数-single-transaction，导数据之前就会启动一个事务，来确保拿到一致性视图。这个过程中数据是可以正常更新的。single-transaction方法只适用于所有的表使用事务引擎的库。如果表使用了不支持事务的引擎，只能使用FTWRL方法。 
    set global readonly = true方式设置全库只读，但是存在问题：1.在有些系统中，readonly的值会被用来做其他逻辑，比如判断一个库是主库还是备库。因此，修改global变量的方式影响面更大，不建议使用；2.在异常机制上有差异，如果执行ftwrl命令之后由于客户端发生异常断开，那么MySQL会自动释放这个全局锁，整个库回到可以正常更新的状态。而将整个库设置为readonly之后，如果客户端发生异常，则数据库就会一直保持readonly状态，这样会导致整个库长时间处于不可写状态，风向比较高；3.全库只读readonly=true还有个情况在slave上，如果用户有超级权限的话，readonly是失效的；
    
* 表级锁：MySQL里面表级别的锁有两种：一种是表锁，一种是元数据锁（meta data lock MDL）;
    表锁：语法是lock tables ... read/write。可以用unlock tables主动释放锁，也可以在客户端断开的时候自动释放。tips：lock tables 语法除了会限制别的线程的读写外，也限定了本线程接下来的操作对象
    元数据锁：不需要显式使用，在访问一个表的时候会被自动加上。保证读写的正确性。当对一个表做增删改查操作的时候，加MDL读锁，当要对表结构变更操作时，加DML写锁。读锁之间不互斥，读写之间、写锁之间是互斥的。
* 给一个小表加个字段，导致整个库挂了？为啥？（MDL会直到事务提交才释放，在做表结构变更的时候，不要导致锁住线上查询和更新）
* 如何安全给小表加字段？1.解决长事务；2.ALTER TABLE tbl_name NOWAIT add column ... ALTER TABLE tbl_name WAIT N add column ... （MariaDB、ALiSQL）
* online DDL操作过程：1.获取MDL写锁，2.降级成MDL读锁；3.真正做DDL，4.升级成MDL写锁，5.释放MDL锁；1、2、4、5如果没有锁冲突，执行时间非常短。第3步占用了DDL绝大部分时间，这期间这个表可以正常读写数据，是因此称为“online ”

* 行锁：在InnoDB事务中，行锁是在需要的时候才加上的，但并不是不需要了就立刻释放，而是要等到事务结束时才释放，这个就是两阶段锁协议；
    事务中需要锁多个行，要把最可能造成锁冲突、最可能影响并发度的锁尽量往后放。
* 两阶段锁的概念是什么? 对事务使用有什么帮助?
* 死锁的概念是什么? 举例说明出现死锁的情况？
* 死锁的处理策略有哪两种? 1.直接进入等待，直到超时。超时时间可以通过参数innodb_lock_wait_timeout来设置,默认值50s;2.发起死锁检测，发现死锁后，主动回滚锁链条中的某一个事务，让其他事务得以继续执行。参数innodb_deadlock_detect设置为on，表示开启这个逻辑；
* 等待超时处理死锁的机制什么?有什么局限?
* 有哪些思路可以解决热点更新导致的并发问题? 死锁检测要耗费大量的cpu资源；


