##Optional
* 解决NPE问题  NullPointException
* String str = null;
* value-based

##方法引用 method reference
* 方法引用实际上是个Lambda表达式个一个语法糖;
* 我们可以将方法引用看做是一个"函数指针"，function pointer;
* 方法引用分为4类：
1.类名::静态方法名(classname::staticmethod或classname.staticmethod 区别，两者没有任何关系，classname.staticmethod方法调用，classname::staticmethod方法指向)
2.引用名(对象名)::实例方法名
3.类名::实例方法名
4.构造方法引用: 类名::new

##JDK8 default方法
* 默认方法解决什么问题呢
* 为了保证向后兼容，使老代码可以编译通过；比如List接口，JDK8增加了默认方法sort，这个方法已经实现了，不需要实现者去做任何修改就能使用，更好的兼容历史代码，如果增加的是一个接口，那么历史代码就得修改去实现这个接口，因此能很好的避免这个问题。

##Stream 流
* java.util.stream
* 流由三部分组成：1.源，2.零个或多个中间操作，3.终止操作
* 流操作分类：1.惰性求值，2.及早求值;（stream.xxx().yyy().zzz().cont()）；
* Collection提供了新的stream()方法；
* 流不存储值，通过管道的方式获取值；
* 本质是函数式的，对流的操作会生成一个结果，不过并不会修改底层的数据源，集合可以作为流的底层数据源；
* 延迟查找，很多流操作（过滤、映射、排序等）都可以延迟实现；
* 函数式编程和传统面向对象的区别？函数式编程传递的是行为，而不是数据；
* 和迭代器又不同的是，Stream可以并行化操作，迭代器只能命令式地、串行化操作
* 当使用串行方式去遍历时，每个item读完后再读下一个item
* 使用并行去遍历时，数据会被分成多个段，其中每一个都在不同的线程中处理，然后将结果一起输出
* Stream的并行操作依赖于Java7中引入的Fork/Jion框架

select name from student where age > 20 and address='beijing' order by age desc;

描述性的语言：

students.stream().filter(student -> student.getAge() > 20).filter()

内部迭代 lambda表达式

外部迭代 for循环


集合关注的是数据与数据存储本身；流关注的则是对数据的计算；

流与迭代器类似的一点是：流是无法重复使用或消费的；

中间操作都会返回一个Stream对象，比如说返回Stream<T>....

终止操作则不返回Stream类型，可能不返回值，也可能返回其他类型的单个值；

